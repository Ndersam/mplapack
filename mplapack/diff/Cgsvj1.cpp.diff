--- mplapack_old/mplapack/reference/Cgsvj1.cpp	2021-08-01 17:23:21.617787538 +0900
+++ mplapack/mplapack/reference/Cgsvj1.cpp	2021-08-01 15:53:29.389284517 +0900
@@ -270,7 +270,7 @@
                                 //
                                 //                           AAPQ = AAPQ * CONJG(CWORK(p))*CWORK(q)
                                 aapq1 = -abs(aapq);
-                                mxaapq = max(mxaapq, -aapq1);
+                                mxaapq = max(mxaapq, REAL(-aapq1));
                                 //
                                 //        TO rotate or NOT to rotate, THAT is the question ...
                                 //
@@ -297,9 +297,9 @@
                                             if (rsvec) {
                                                 Crot(mvl, &v[(p - 1) * ldv], 1, &v[(q - 1) * ldv], 1, cs, conj(ompq) * t);
                                             }
-                                            sva[q - 1] = aaqq * sqrt(max(zero, one + t * apoaq * aapq1));
-                                            aapp = aapp * sqrt(max(zero, one - t * aqoap * aapq1));
-                                            mxsinj = max(mxsinj, abs(t));
+                                            sva[q - 1] = aaqq * sqrt(max(zero, REAL(one + t * apoaq * aapq1)));
+                                            aapp = aapp * sqrt(max(zero, REAL(one - t * aqoap * aapq1)));
+                                            mxsinj = max(mxsinj, REAL(abs(t)));
                                         } else {
                                             //
                                             //                 .. choose correct signum for THETA and rotate
@@ -311,9 +311,9 @@
                                             t = one / (theta + thsign * sqrt(one + theta * theta));
                                             cs = sqrt(one / (one + t * t));
                                             sn = t * cs;
-                                            mxsinj = max(mxsinj, abs(sn));
-                                            sva[q - 1] = aaqq * sqrt(max(zero, one + t * apoaq * aapq1));
-                                            aapp = aapp * sqrt(max(zero, one - t * aqoap * aapq1));
+                                            mxsinj = max(mxsinj, REAL(abs(sn)));
+                                            sva[q - 1] = aaqq * sqrt(max(zero, REAL(one + t * apoaq * aapq1)));
+                                            aapp = aapp * sqrt(max(zero, REAL(one - t * aqoap * aapq1)));
                                             //
                                             Crot(m, &a[(p - 1) * lda], 1, &a[(q - 1) * lda], 1, cs, conj(ompq) * sn);
                                             if (rsvec) {
@@ -330,7 +330,7 @@
                                             Clascl("G", 0, 0, aaqq, one, m, 1, &a[(q - 1) * lda], lda, ierr);
                                             Caxpy(m, -aapq, work, 1, &a[(q - 1) * lda], 1);
                                             Clascl("G", 0, 0, one, aaqq, m, 1, &a[(q - 1) * lda], lda, ierr);
-                                            sva[q - 1] = aaqq * sqrt(max(zero, one - aapq1 * aapq1));
+                                            sva[q - 1] = aaqq * sqrt(max(zero, REAL(one - aapq1 * aapq1)));
                                             mxsinj = max(mxsinj, sfmin);
                                         } else {
                                             Ccopy(m, &a[(q - 1) * lda], 1, work, 1);
@@ -338,7 +338,7 @@
                                             Clascl("G", 0, 0, aapp, one, m, 1, &a[(p - 1) * lda], lda, ierr);
                                             Caxpy(m, -conj(aapq), work, 1, &a[(p - 1) * lda], 1);
                                             Clascl("G", 0, 0, one, aapp, m, 1, &a[(p - 1) * lda], lda, ierr);
-                                            sva[p - 1] = aapp * sqrt(max(zero, one - aapq1 * aapq1));
+                                            sva[p - 1] = aapp * sqrt(max(zero, REAL(one - aapq1 * aapq1)));
                                             mxsinj = max(mxsinj, sfmin);
                                         }
                                     }
