/*
 * Copyright (c) 2012
 *	Nakata, Maho
 * 	All rights reserved.
 *
 * $Id: mplapack_double.h,v 1.4 2010/08/07 03:15:46 nakatamaho Exp $
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

#ifndef _MPLAPACK__FLOAT64X_H_
#define _MPLAPACK__FLOAT64X_H_

#include "mplapack_config.h"

_Float64x Clangt(const char *norm, mplapackint const n, std::complex<_Float64x> *dl, std::complex<_Float64x> *d, std::complex<_Float64x> *du);
_Float64x Clanhe(const char *norm, const char *uplo, mplapackint const n, std::complex<_Float64x> *a, mplapackint const lda, _Float64x *work);
_Float64x Clanht(const char *norm, mplapackint const n, _Float64x *d, std::complex<_Float64x> *e);
_Float64x Clansy(const char *norm, const char *uplo, mplapackint const n, std::complex<_Float64x> *a, mplapackint const lda, _Float64x *work);
_Float64x RCsum1(mplapackint const n, std::complex<_Float64x> *cx, mplapackint const incx);
_Float64x Rla_gerpvgrw(mplapackint const n, mplapackint const ncols, _Float64x *a, mplapackint const lda, _Float64x *af, mplapackint const ldaf);
_Float64x Rladiv2(_Float64x const &a, _Float64x const &b, _Float64x const &c, _Float64x const &d, _Float64x const &r, _Float64x const &t);
_Float64x Rladiv2(_Float64x const &a, _Float64x const &b, _Float64x const &c, _Float64x const &d, _Float64x const &r, _Float64x const &t);
_Float64x Rlamch__Float64x(const char *cmach);
_Float64x Rlangt(const char *norm, mplapackint const n, _Float64x *dl, _Float64x *d, _Float64x *du);
_Float64x Rlanst(const char *norm, mplapackint const n, _Float64x *d, _Float64x *e);
_Float64x Rlansy(const char *norm, const char *uplo, mplapackint const n, _Float64x *a, mplapackint const lda, _Float64x *work);
_Float64x Rlapy2(_Float64x const x, _Float64x const y);
_Float64x Rlapy3(_Float64x const x, _Float64x const y, _Float64x const z);
_Float64x abs1(std::complex<_Float64x> ff);
_Float64x abs1(std::complex<_Float64x> ff);
_Float64x abs1(std::complex<_Float64x> ff);
_Float64x abssq(std::complex<_Float64x> ff);
_Float64x abssq(std::complex<_Float64x> ff);
bool Risnan(_Float64x const din);
bool Rlaisnan(_Float64x const din1, _Float64x const din2);
mplapackint Rlaneg(mplapackint const n, _Float64x *d, _Float64x *lld, _Float64x const sigma, _Float64x const, mplapackint const r);
mplapackint iCmax1(mplapackint const n, std::complex<_Float64x> *zx, mplapackint const incx);
mplapackint iMladlc(mplapackint const m, mplapackint const n, _Float64x *a, mplapackint const lda);
mplapackint iMladlr(mplapackint const m, mplapackint const n, _Float64x *a, mplapackint const lda);
mplapackint iMlaenv__Float64x(mplapackint ispec, const char *name, const char *opts, mplapackint n1, mplapackint n2, mplapackint n3, mplapackint n4);
mplapackint iMlazlc(mplapackint const m, mplapackint const n, std::complex<_Float64x> *a, mplapackint const lda);
mplapackint iMlazlr(mplapackint const m, mplapackint const n, std::complex<_Float64x> *a, mplapackint const lda);
std::complex<_Float64x> Cladiv(std::complex<_Float64x> const x, std::complex<_Float64x> const y);
void CRrscl(mplapackint const n, _Float64x const sa, std::complex<_Float64x> *sx, mplapackint const incx);
void Cgebak(const char *job, const char *side, mplapackint const n, mplapackint const ilo, mplapackint const ihi, _Float64x *scale, mplapackint const m, std::complex<_Float64x> *v, mplapackint const ldv, mplapackint &info);
void Cgelq(mplapackint const m, mplapackint const n, std::complex<_Float64x> *a, mplapackint const lda, std::complex<_Float64x> *t, mplapackint const tsize, std::complex<_Float64x> *work, mplapackint const lwork, mplapackint &info);
void Cgelqt(mplapackint const m, mplapackint const n, mplapackint const mb, std::complex<_Float64x> *a, mplapackint const lda, std::complex<_Float64x> *t, mplapackint const ldt, std::complex<_Float64x> *work, mplapackint &info);
void Cgemlqt(const char *side, const char *trans, mplapackint const m, mplapackint const n, mplapackint const k, mplapackint const mb, std::complex<_Float64x> *v, mplapackint const ldv, std::complex<_Float64x> *t, mplapackint const ldt, std::complex<_Float64x> *c, mplapackint const ldc, std::complex<_Float64x> *work, mplapackint &info);
void Cgemqrt(const char *side, const char *trans, mplapackint const m, mplapackint const n, mplapackint const k, mplapackint const nb, std::complex<_Float64x> *v, mplapackint const ldv, std::complex<_Float64x> *t, mplapackint const ldt, std::complex<_Float64x> *c, mplapackint const ldc, std::complex<_Float64x> *work, mplapackint &info);
void Cgeqr(mplapackint const m, mplapackint const n, std::complex<_Float64x> *a, mplapackint const lda, std::complex<_Float64x> *t, mplapackint const tsize, std::complex<_Float64x> *work, mplapackint const lwork, mplapackint &info);
void Cgeqrt(mplapackint const m, mplapackint const n, mplapackint const nb, std::complex<_Float64x> *a, mplapackint const lda, std::complex<_Float64x> *t, mplapackint const ldt, std::complex<_Float64x> *work, mplapackint &info);
void Cgesv(mplapackint const n, mplapackint const nrhs, std::complex<_Float64x> *a, mplapackint const lda, mplapackint *ipiv, std::complex<_Float64x> *b, mplapackint const ldb, mplapackint &info);
void Cgetc2(mplapackint const n, std::complex<_Float64x> *a, mplapackint const lda, mplapackint *ipiv, mplapackint *jpiv, mplapackint &info);
void Cgetf2(mplapackint const m, mplapackint const n, std::complex<_Float64x> *a, mplapackint const lda, mplapackint *ipiv, mplapackint &info);
void Cgetrf(mplapackint const m, mplapackint const n, std::complex<_Float64x> *a, mplapackint const lda, mplapackint *ipiv, mplapackint &info);
void Cgetrf2(mplapackint const m, mplapackint const n, std::complex<_Float64x> *a, mplapackint const lda, mplapackint *ipiv, mplapackint &info);
void Cgetri(mplapackint const n, std::complex<_Float64x> *a, mplapackint const lda, mplapackint *ipiv, std::complex<_Float64x> *work, mplapackint const lwork, mplapackint &info);
void Cgetrs(const char *trans, mplapackint const n, mplapackint const nrhs, std::complex<_Float64x> *a, mplapackint const lda, mplapackint *ipiv, std::complex<_Float64x> *b, mplapackint const ldb, mplapackint &info);
void Cggbak(const char *job, const char *side, mplapackint const n, mplapackint const ilo, mplapackint const ihi, _Float64x *lscale, _Float64x *rscale, mplapackint const m, std::complex<_Float64x> *v, mplapackint const ldv, mplapackint &info);
void Cgtts2(mplapackint const itrans, mplapackint const n, mplapackint const nrhs, std::complex<_Float64x> *dl, std::complex<_Float64x> *d, std::complex<_Float64x> *du, std::complex<_Float64x> *du2, mplapackint *ipiv, std::complex<_Float64x> *b, mplapackint const ldb);
void Cheev(const char *jobz, const char *uplo, mplapackint const n, std::complex<_Float64x> *a, mplapackint const lda, _Float64x *w, std::complex<_Float64x> *work, mplapackint const lwork, _Float64x *rwork, mplapackint &info);
void Chegst(mplapackint const itype, const char *uplo, mplapackint const n, std::complex<_Float64x> *a, mplapackint const lda, std::complex<_Float64x> *b, mplapackint const ldb, mplapackint &info);
void Chesv(const char *uplo, mplapackint const n, mplapackint const nrhs, std::complex<_Float64x> *a, mplapackint const lda, mplapackint *ipiv, std::complex<_Float64x> *b, mplapackint const ldb, std::complex<_Float64x> *work, mplapackint const lwork, mplapackint &info);
void Chesv_rook(const char *uplo, mplapackint const n, mplapackint const nrhs, std::complex<_Float64x> *a, mplapackint const lda, mplapackint *ipiv, std::complex<_Float64x> *b, mplapackint const ldb, std::complex<_Float64x> *work, mplapackint const lwork, mplapackint &info);
void Chetd2(const char *uplo, mplapackint const n, std::complex<_Float64x> *a, mplapackint const lda, _Float64x *d, _Float64x *e, std::complex<_Float64x> *tau, mplapackint &info);
void Chetrd(const char *uplo, mplapackint const n, std::complex<_Float64x> *a, mplapackint const lda, _Float64x *d, _Float64x *e, std::complex<_Float64x> *tau, std::complex<_Float64x> *work, mplapackint const lwork, mplapackint &info);
void Chetri(const char *uplo, mplapackint const n, std::complex<_Float64x> *a, mplapackint const lda, mplapackint *ipiv, std::complex<_Float64x> *work, mplapackint &info);
void Chetri2(const char *uplo, mplapackint const n, std::complex<_Float64x> *a, mplapackint const lda, mplapackint *ipiv, std::complex<_Float64x> *work, mplapackint const lwork, mplapackint &info);
void Chetri_3(const char *uplo, mplapackint const n, std::complex<_Float64x> *a, mplapackint const lda, std::complex<_Float64x> *e, mplapackint *ipiv, std::complex<_Float64x> *work, mplapackint const lwork, mplapackint &info);
void Chetri_rook(const char *uplo, mplapackint const n, std::complex<_Float64x> *a, mplapackint const lda, mplapackint *ipiv, std::complex<_Float64x> *work, mplapackint &info);
void Chetrs(const char *uplo, mplapackint const n, mplapackint const nrhs, std::complex<_Float64x> *a, mplapackint const lda, mplapackint *ipiv, std::complex<_Float64x> *b, mplapackint const ldb, mplapackint &info);
void Chetrs2(const char *uplo, mplapackint const n, mplapackint const nrhs, std::complex<_Float64x> *a, mplapackint const lda, mplapackint *ipiv, std::complex<_Float64x> *b, mplapackint const ldb, std::complex<_Float64x> *work, mplapackint &info);
void Chetrs_3(const char *uplo, mplapackint const n, mplapackint const nrhs, std::complex<_Float64x> *a, mplapackint const lda, std::complex<_Float64x> *e, mplapackint *ipiv, std::complex<_Float64x> *b, mplapackint const ldb, mplapackint &info);
void Chetrs_aa(const char *uplo, mplapackint const n, mplapackint const nrhs, std::complex<_Float64x> *a, mplapackint const lda, mplapackint *ipiv, std::complex<_Float64x> *b, mplapackint const ldb, std::complex<_Float64x> *work, mplapackint const lwork, mplapackint &info);
void Chetrs_rook(const char *uplo, mplapackint const n, mplapackint const nrhs, std::complex<_Float64x> *a, mplapackint const lda, mplapackint *ipiv, std::complex<_Float64x> *b, mplapackint const ldb, mplapackint &info);
void Chfrk(const char *transr, const char *uplo, const char *trans, mplapackint const n, mplapackint const k, _Float64x const alpha, std::complex<_Float64x> *a, mplapackint const lda, _Float64x const beta, std::complex<_Float64x> *c);
void Chpsv(const char *uplo, mplapackint const n, mplapackint const nrhs, std::complex<_Float64x> *ap, mplapackint *ipiv, std::complex<_Float64x> *b, mplapackint const ldb, mplapackint &info);
void Cla_wwaddw(mplapackint const n, std::complex<_Float64x> *x, std::complex<_Float64x> *y, std::complex<_Float64x> *w);
void Clacgv(mplapackint const n, std::complex<_Float64x> *x, mplapackint const incx);
void Clacp2(const char *uplo, mplapackint const m, mplapackint const n, _Float64x *a, mplapackint const lda, std::complex<_Float64x> *b, mplapackint const ldb);
void Clacpy(const char *uplo, mplapackint const m, mplapackint const n, std::complex<_Float64x> *a, mplapackint const lda, std::complex<_Float64x> *b, mplapackint const ldb);
void Clacrm(mplapackint const m, mplapackint const n, std::complex<_Float64x> *a, mplapackint const lda, _Float64x *b, mplapackint const ldb, std::complex<_Float64x> *c, mplapackint const ldc, _Float64x *rwork);
void Clacrt(mplapackint const n, std::complex<_Float64x> *cx, mplapackint const incx, std::complex<_Float64x> *cy, mplapackint const incy, std::complex<_Float64x> const c, std::complex<_Float64x> const s);
void Claesy(std::complex<_Float64x> const a, std::complex<_Float64x> const b, std::complex<_Float64x> const c, std::complex<_Float64x> &rt1, std::complex<_Float64x> &rt2, std::complex<_Float64x> &evscal, std::complex<_Float64x> &cs1, std::complex<_Float64x> &sn1);
void Claev2(std::complex<_Float64x> const a, std::complex<_Float64x> const b, std::complex<_Float64x> const c, _Float64x &rt1, _Float64x &rt2, _Float64x &cs1, std::complex<_Float64x> &sn1);
void Clagtm(const char *trans, mplapackint const n, mplapackint const nrhs, _Float64x const alpha, std::complex<_Float64x> *dl, std::complex<_Float64x> *d, std::complex<_Float64x> *du, std::complex<_Float64x> *x, mplapackint const ldx, _Float64x const beta, std::complex<_Float64x> *b, mplapackint const ldb);
void Clahef(const char *uplo, mplapackint const n, mplapackint const nb, mplapackint &kb, std::complex<_Float64x> *a, mplapackint const lda, mplapackint *ipiv, std::complex<_Float64x> *w, mplapackint const ldw, mplapackint &info);
void Clapmr(bool const forwrd, mplapackint const m, mplapackint const n, std::complex<_Float64x> *x, mplapackint const ldx, mplapackint *k);
void Clapmt(bool const forwrd, mplapackint const m, mplapackint const n, std::complex<_Float64x> *x, mplapackint const ldx, mplapackint *k);
void Claqgb(mplapackint const m, mplapackint const n, mplapackint const kl, mplapackint const ku, std::complex<_Float64x> *ab, mplapackint const ldab, _Float64x *r, _Float64x *c, _Float64x const rowcnd, _Float64x const colcnd, _Float64x const amax, char *equed);
void Claqge(mplapackint const m, mplapackint const n, std::complex<_Float64x> *a, mplapackint const lda, _Float64x *r, _Float64x *c, _Float64x const rowcnd, _Float64x const colcnd, _Float64x const amax, char *equed);
void Claqhb(const char *uplo, mplapackint const n, mplapackint const kd, std::complex<_Float64x> *ab, mplapackint const ldab, _Float64x *s, _Float64x const scond, _Float64x const amax, char *equed);
void Claqhe(const char *uplo, mplapackint const n, std::complex<_Float64x> *a, mplapackint const lda, _Float64x *s, _Float64x const scond, _Float64x const amax, char *equed);
void Claqhp(const char *uplo, mplapackint const n, std::complex<_Float64x> *ap, _Float64x *s, _Float64x const scond, _Float64x const amax, char *equed);
void Claqsb(const char *uplo, mplapackint const n, mplapackint const kd, std::complex<_Float64x> *ab, mplapackint const ldab, _Float64x *s, _Float64x const scond, _Float64x const amax, char *equed);
void Claqsp(const char *uplo, mplapackint const n, std::complex<_Float64x> *ap, _Float64x *s, _Float64x const scond, _Float64x const amax, char *equed);
void Claqsy(const char *uplo, mplapackint const n, std::complex<_Float64x> *a, mplapackint const lda, _Float64x *s, _Float64x const scond, _Float64x const amax, char *equed);
void Clar2v(mplapackint const n, std::complex<_Float64x> *x, std::complex<_Float64x> *y, std::complex<_Float64x> *z, mplapackint const incx, _Float64x *c, std::complex<_Float64x> *s, mplapackint const incc);
void Clarf(const char *side, mplapackint const m, mplapackint const n, std::complex<_Float64x> *v, mplapackint const incv, std::complex<_Float64x> const tau, std::complex<_Float64x> *c, mplapackint const ldc, std::complex<_Float64x> *work);
void Clarfb(const char *side, const char *trans, const char *direct, const char *storev, mplapackint const m, mplapackint const n, mplapackint const k, std::complex<_Float64x> *v, mplapackint const ldv, std::complex<_Float64x> *t, mplapackint const ldt, std::complex<_Float64x> *c, mplapackint const ldc, std::complex<_Float64x> *work, mplapackint const ldwork);
void Clarfb_gett(const char *ident, mplapackint const m, mplapackint const n, mplapackint const k, std::complex<_Float64x> *t, mplapackint const ldt, std::complex<_Float64x> *a, mplapackint const lda, std::complex<_Float64x> *b, mplapackint const ldb, std::complex<_Float64x> *work, mplapackint const ldwork);
void Clarfg(mplapackint const n, std::complex<_Float64x> &alpha, std::complex<_Float64x> *x, mplapackint const incx, std::complex<_Float64x> &tau);
void Clarft(const char *direct, const char *storev, mplapackint const n, mplapackint const k, std::complex<_Float64x> *v, mplapackint const ldv, std::complex<_Float64x> *tau, std::complex<_Float64x> *t, mplapackint const ldt);
void Clarfx(const char *side, mplapackint const m, mplapackint const n, std::complex<_Float64x> *v, std::complex<_Float64x> const tau, std::complex<_Float64x> *c, mplapackint const ldc, std::complex<_Float64x> *work);
void Clarfy(const char *uplo, mplapackint const n, std::complex<_Float64x> *v, mplapackint const incv, std::complex<_Float64x> const tau, std::complex<_Float64x> *c, mplapackint const ldc, std::complex<_Float64x> *work);
void Clarscl2(mplapackint const m, mplapackint const n, _Float64x *d, std::complex<_Float64x> *x, mplapackint const ldx);
void Clartg(std::complex<_Float64x> const f, std::complex<_Float64x> const g, _Float64x &cs, std::complex<_Float64x> &sn, std::complex<_Float64x> &r);
void Clartv(mplapackint const n, std::complex<_Float64x> *x, mplapackint const incx, std::complex<_Float64x> *y, mplapackint const incy, _Float64x *c, std::complex<_Float64x> *s, mplapackint const incc);
void Clarz(const char *side, mplapackint const m, mplapackint const n, mplapackint const l, std::complex<_Float64x> *v, mplapackint const incv, std::complex<_Float64x> const tau, std::complex<_Float64x> *c, mplapackint const ldc, std::complex<_Float64x> *work);
void Clarzt(const char *direct, const char *storev, mplapackint const n, mplapackint const k, std::complex<_Float64x> *v, mplapackint const ldv, std::complex<_Float64x> *tau, std::complex<_Float64x> *t, mplapackint const ldt);
void Clascl(const char *type, mplapackint const kl, mplapackint const ku, _Float64x const cfrom, _Float64x const cto, mplapackint const m, mplapackint const n, std::complex<_Float64x> *a, mplapackint const lda, mplapackint &info);
void Clascl2(mplapackint const m, mplapackint const n, _Float64x *d, std::complex<_Float64x> *x, mplapackint const ldx);
void Claset(const char *uplo, mplapackint const m, mplapackint const n, std::complex<_Float64x> const alpha, std::complex<_Float64x> const beta, std::complex<_Float64x> *a, mplapackint const lda);
void Clasr(const char *side, const char *pivot, const char *direct, mplapackint const m, mplapackint const n, _Float64x *c, _Float64x *s, std::complex<_Float64x> *a, mplapackint const lda);
void Classq(mplapackint const n, std::complex<_Float64x> *x, mplapackint const incx, _Float64x &scale, _Float64x &sumsq);
void Claswlq(mplapackint const m, mplapackint const n, mplapackint const mb, mplapackint const nb, std::complex<_Float64x> *a, mplapackint const lda, std::complex<_Float64x> *t, mplapackint const ldt, std::complex<_Float64x> *work, mplapackint const lwork, mplapackint &info);
void Claswp(mplapackint const n, std::complex<_Float64x> *a, mplapackint const lda, mplapackint const k1, mplapackint const k2, mplapackint *ipiv, mplapackint const incx);
void Clasyf(const char *uplo, mplapackint const n, mplapackint const nb, mplapackint &kb, std::complex<_Float64x> *a, mplapackint const lda, mplapackint *ipiv, std::complex<_Float64x> *w, mplapackint const ldw, mplapackint &info);
void Clatrd(const char *uplo, mplapackint const n, mplapackint const nb, std::complex<_Float64x> *a, mplapackint const lda, _Float64x *e, std::complex<_Float64x> *tau, std::complex<_Float64x> *w, mplapackint const ldw);
void Clatsqr(mplapackint const m, mplapackint const n, mplapackint const mb, mplapackint const nb, std::complex<_Float64x> *a, mplapackint const lda, std::complex<_Float64x> *t, mplapackint const ldt, std::complex<_Float64x> *work, mplapackint const lwork, mplapackint &info);
void Claunhr_col_getrfnp(mplapackint const m, mplapackint const n, std::complex<_Float64x> *a, mplapackint const lda, std::complex<_Float64x> *d, mplapackint &info);
void Clauum(const char *uplo, mplapackint const n, std::complex<_Float64x> *a, mplapackint const lda, mplapackint &info);
void Cpbequ(const char *uplo, mplapackint const n, mplapackint const kd, std::complex<_Float64x> *ab, mplapackint const ldab, _Float64x *s, _Float64x &scond, _Float64x &amax, mplapackint &info);
void Cpbsv(const char *uplo, mplapackint const n, mplapackint const kd, mplapackint const nrhs, std::complex<_Float64x> *ab, mplapackint const ldab, std::complex<_Float64x> *b, mplapackint const ldb, mplapackint &info);
void Cpbtrs(const char *uplo, mplapackint const n, mplapackint const kd, mplapackint const nrhs, std::complex<_Float64x> *ab, mplapackint const ldab, std::complex<_Float64x> *b, mplapackint const ldb, mplapackint &info);
void Cpoequ(mplapackint const n, std::complex<_Float64x> *a, mplapackint const lda, _Float64x *s, _Float64x &scond, _Float64x &amax, mplapackint &info);
void Cposv(const char *uplo, mplapackint const n, mplapackint const nrhs, std::complex<_Float64x> *a, mplapackint const lda, std::complex<_Float64x> *b, mplapackint const ldb, mplapackint &info);
void Cpotf2(const char *uplo, mplapackint const n, std::complex<_Float64x> *a, mplapackint const lda, mplapackint &info);
void Cpotrf(const char *uplo, mplapackint const n, std::complex<_Float64x> *a, mplapackint const lda, mplapackint &info);
void Cpotrf2(const char *uplo, mplapackint const n, std::complex<_Float64x> *a, mplapackint const lda, mplapackint &info);
void Cpotri(const char *uplo, mplapackint const n, std::complex<_Float64x> *a, mplapackint const lda, mplapackint &info);
void Cpotrs(const char *uplo, mplapackint const n, mplapackint const nrhs, std::complex<_Float64x> *a, mplapackint const lda, std::complex<_Float64x> *b, mplapackint const ldb, mplapackint &info);
void Cppequ(const char *uplo, mplapackint const n, std::complex<_Float64x> *ap, _Float64x *s, _Float64x &scond, _Float64x &amax, mplapackint &info);
void Cppsv(const char *uplo, mplapackint const n, mplapackint const nrhs, std::complex<_Float64x> *ap, std::complex<_Float64x> *b, mplapackint const ldb, mplapackint &info);
void Cpptrs(const char *uplo, mplapackint const n, mplapackint const nrhs, std::complex<_Float64x> *ap, std::complex<_Float64x> *b, mplapackint const ldb, mplapackint &info);
void Cptcon(mplapackint const n, _Float64x *d, std::complex<_Float64x> *e, _Float64x const anorm, _Float64x &rcond, _Float64x *rwork, mplapackint &info);
void Cptsv(mplapackint const n, mplapackint const nrhs, _Float64x *d, std::complex<_Float64x> *e, std::complex<_Float64x> *b, mplapackint const ldb, mplapackint &info);
void Cpttrf(mplapackint const n, _Float64x *d, std::complex<_Float64x> *e, mplapackint &info);
void Cpttrs(const char *uplo, mplapackint const n, mplapackint const nrhs, _Float64x *d, std::complex<_Float64x> *e, std::complex<_Float64x> *b, mplapackint const ldb, mplapackint &info);
void Cptts2(mplapackint const iuplo, mplapackint const n, mplapackint const nrhs, _Float64x *d, std::complex<_Float64x> *e, std::complex<_Float64x> *b, mplapackint const ldb);
void Crot(mplapackint const n, std::complex<_Float64x> *cx, mplapackint const incx, std::complex<_Float64x> *cy, mplapackint const incy, _Float64x const c, std::complex<_Float64x> const s);
void Cspmv(const char *uplo, mplapackint const n, std::complex<_Float64x> const alpha, std::complex<_Float64x> *ap, std::complex<_Float64x> *x, mplapackint const incx, std::complex<_Float64x> const beta, std::complex<_Float64x> *y, mplapackint const incy);
void Cspr(const char *uplo, mplapackint const n, std::complex<_Float64x> const alpha, std::complex<_Float64x> *x, mplapackint const incx, std::complex<_Float64x> *ap);
void Cspsv(const char *uplo, mplapackint const n, mplapackint const nrhs, std::complex<_Float64x> *ap, mplapackint *ipiv, std::complex<_Float64x> *b, mplapackint const ldb, mplapackint &info);
void Csteqr(const char *compz, mplapackint const n, _Float64x *d, _Float64x *e, std::complex<_Float64x> *z, mplapackint const ldz, _Float64x *work, mplapackint &info);
void Csyconv(const char *uplo, const char *way, mplapackint const n, std::complex<_Float64x> *a, mplapackint const lda, mplapackint *ipiv, std::complex<_Float64x> *e, mplapackint &info);
void Csyconvf(const char *uplo, const char *way, mplapackint const n, std::complex<_Float64x> *a, mplapackint const lda, std::complex<_Float64x> *e, mplapackint *ipiv, mplapackint &info);
void Csyconvf_rook(const char *uplo, const char *way, mplapackint const n, std::complex<_Float64x> *a, mplapackint const lda, std::complex<_Float64x> *e, mplapackint *ipiv, mplapackint &info);
void Csymv(const char *uplo, mplapackint const n, std::complex<_Float64x> const alpha, std::complex<_Float64x> *a, mplapackint const lda, std::complex<_Float64x> *x, mplapackint const incx, std::complex<_Float64x> const beta, std::complex<_Float64x> *y, mplapackint const incy);
void Csyr(const char *uplo, mplapackint const n, std::complex<_Float64x> const alpha, std::complex<_Float64x> *x, mplapackint const incx, std::complex<_Float64x> *a, mplapackint const lda);
void Csytri2(const char *uplo, mplapackint const n, std::complex<_Float64x> *a, mplapackint const lda, mplapackint *ipiv, std::complex<_Float64x> *work, mplapackint const lwork, mplapackint &info);
void Csytri_3(const char *uplo, mplapackint const n, std::complex<_Float64x> *a, mplapackint const lda, std::complex<_Float64x> *e, mplapackint *ipiv, std::complex<_Float64x> *work, mplapackint const lwork, mplapackint &info);
void Csytrs(const char *uplo, mplapackint const n, mplapackint const nrhs, std::complex<_Float64x> *a, mplapackint const lda, mplapackint *ipiv, std::complex<_Float64x> *b, mplapackint const ldb, mplapackint &info);
void Csytrs2(const char *uplo, mplapackint const n, mplapackint const nrhs, std::complex<_Float64x> *a, mplapackint const lda, mplapackint *ipiv, std::complex<_Float64x> *b, mplapackint const ldb, std::complex<_Float64x> *work, mplapackint &info);
void Csytrs_3(const char *uplo, mplapackint const n, mplapackint const nrhs, std::complex<_Float64x> *a, mplapackint const lda, std::complex<_Float64x> *e, mplapackint *ipiv, std::complex<_Float64x> *b, mplapackint const ldb, mplapackint &info);
void Csytrs_aa(const char *uplo, mplapackint const n, mplapackint const nrhs, std::complex<_Float64x> *a, mplapackint const lda, mplapackint *ipiv, std::complex<_Float64x> *b, mplapackint const ldb, std::complex<_Float64x> *work, mplapackint const lwork, mplapackint &info);
void Csytrs_rook(const char *uplo, mplapackint const n, mplapackint const nrhs, std::complex<_Float64x> *a, mplapackint const lda, mplapackint *ipiv, std::complex<_Float64x> *b, mplapackint const ldb, mplapackint &info);
void Ctbtrs(const char *uplo, const char *trans, const char *diag, mplapackint const n, mplapackint const kd, mplapackint const nrhs, std::complex<_Float64x> *ab, mplapackint const ldab, std::complex<_Float64x> *b, mplapackint const ldb, mplapackint &info);
void Ctgexc(bool const wantq, bool const wantz, mplapackint const n, std::complex<_Float64x> *a, mplapackint const lda, std::complex<_Float64x> *b, mplapackint const ldb, std::complex<_Float64x> *q, mplapackint const ldq, std::complex<_Float64x> *z, mplapackint const ldz, mplapackint const ifst, mplapackint &ilst, mplapackint &info);
void Ctplqt(mplapackint const m, mplapackint const n, mplapackint const l, mplapackint const mb, std::complex<_Float64x> *a, mplapackint const lda, std::complex<_Float64x> *b, mplapackint const ldb, std::complex<_Float64x> *t, mplapackint const ldt, std::complex<_Float64x> *work, mplapackint &info);
void Ctpmlqt(const char *side, const char *trans, mplapackint const m, mplapackint const n, mplapackint const k, mplapackint const l, mplapackint const mb, std::complex<_Float64x> *v, mplapackint const ldv, std::complex<_Float64x> *t, mplapackint const ldt, std::complex<_Float64x> *a, mplapackint const lda, std::complex<_Float64x> *b, mplapackint const ldb, std::complex<_Float64x> *work, mplapackint &info);
void Ctpmqrt(const char *side, const char *trans, mplapackint const m, mplapackint const n, mplapackint const k, mplapackint const l, mplapackint const nb, std::complex<_Float64x> *v, mplapackint const ldv, std::complex<_Float64x> *t, mplapackint const ldt, std::complex<_Float64x> *a, mplapackint const lda, std::complex<_Float64x> *b, mplapackint const ldb, std::complex<_Float64x> *work, mplapackint &info);
void Ctpqrt(mplapackint const m, mplapackint const n, mplapackint const l, mplapackint const nb, std::complex<_Float64x> *a, mplapackint const lda, std::complex<_Float64x> *b, mplapackint const ldb, std::complex<_Float64x> *t, mplapackint const ldt, std::complex<_Float64x> *work, mplapackint &info);
void Ctprfb(const char *side, const char *trans, const char *direct, const char *storev, mplapackint const m, mplapackint const n, mplapackint const k, mplapackint const l, std::complex<_Float64x> *v, mplapackint const ldv, std::complex<_Float64x> *t, mplapackint const ldt, std::complex<_Float64x> *a, mplapackint const lda, std::complex<_Float64x> *b, mplapackint const ldb, std::complex<_Float64x> *work, mplapackint const ldwork);
void Ctptrs(const char *uplo, const char *trans, const char *diag, mplapackint const n, mplapackint const nrhs, std::complex<_Float64x> *ap, std::complex<_Float64x> *b, mplapackint const ldb, mplapackint &info);
void Ctpttr(const char *uplo, mplapackint const n, std::complex<_Float64x> *ap, std::complex<_Float64x> *a, mplapackint const lda, mplapackint &info);
void Ctrti2(const char *uplo, const char *diag, mplapackint const n, std::complex<_Float64x> *a, mplapackint const lda, mplapackint &info);
void Ctrtri(const char *uplo, const char *diag, mplapackint const n, std::complex<_Float64x> *a, mplapackint const lda, mplapackint &info);
void Ctrtrs(const char *uplo, const char *trans, const char *diag, mplapackint const n, mplapackint const nrhs, std::complex<_Float64x> *a, mplapackint const lda, std::complex<_Float64x> *b, mplapackint const ldb, mplapackint &info);
void Ctrttp(const char *uplo, mplapackint const n, std::complex<_Float64x> *a, mplapackint const lda, std::complex<_Float64x> *ap, mplapackint &info);
void Cunbdb5(mplapackint const m1, mplapackint const m2, mplapackint const n, std::complex<_Float64x> *x1, mplapackint const incx1, std::complex<_Float64x> *x2, mplapackint const incx2, std::complex<_Float64x> *q1, mplapackint const ldq1, std::complex<_Float64x> *q2, mplapackint const ldq2, std::complex<_Float64x> *work, mplapackint const lwork, mplapackint &info);
void Cunbdb6(mplapackint const m1, mplapackint const m2, mplapackint const n, std::complex<_Float64x> *x1, mplapackint const incx1, std::complex<_Float64x> *x2, mplapackint const incx2, std::complex<_Float64x> *q1, mplapackint const ldq1, std::complex<_Float64x> *q2, mplapackint const ldq2, std::complex<_Float64x> *work, mplapackint const lwork, mplapackint &info);
void Cung2l(mplapackint const m, mplapackint const n, mplapackint const k, std::complex<_Float64x> *a, mplapackint const lda, std::complex<_Float64x> *tau, std::complex<_Float64x> *work, mplapackint &info);
void Cung2r(mplapackint const m, mplapackint const n, mplapackint const k, std::complex<_Float64x> *a, mplapackint const lda, std::complex<_Float64x> *tau, std::complex<_Float64x> *work, mplapackint &info);
void Cunghr(mplapackint const n, mplapackint const ilo, mplapackint const ihi, std::complex<_Float64x> *a, mplapackint const lda, std::complex<_Float64x> *tau, std::complex<_Float64x> *work, mplapackint const lwork, mplapackint &info);
void Cungl2(mplapackint const m, mplapackint const n, mplapackint const k, std::complex<_Float64x> *a, mplapackint const lda, std::complex<_Float64x> *tau, std::complex<_Float64x> *work, mplapackint &info);
void Cungql(mplapackint const m, mplapackint const n, mplapackint const k, std::complex<_Float64x> *a, mplapackint const lda, std::complex<_Float64x> *tau, std::complex<_Float64x> *work, mplapackint const lwork, mplapackint &info);
void Cungqr(mplapackint const m, mplapackint const n, mplapackint const k, std::complex<_Float64x> *a, mplapackint const lda, std::complex<_Float64x> *tau, std::complex<_Float64x> *work, mplapackint const lwork, mplapackint &info);
void Cungr2(mplapackint const m, mplapackint const n, mplapackint const k, std::complex<_Float64x> *a, mplapackint const lda, std::complex<_Float64x> *tau, std::complex<_Float64x> *work, mplapackint &info);
void Cungtr(const char *uplo, mplapackint const n, std::complex<_Float64x> *a, mplapackint const lda, std::complex<_Float64x> *tau, std::complex<_Float64x> *work, mplapackint const lwork, mplapackint &info);
void Cungtsqr(mplapackint const m, mplapackint const n, mplapackint const mb, mplapackint const nb, std::complex<_Float64x> *a, mplapackint const lda, std::complex<_Float64x> *t, mplapackint const ldt, std::complex<_Float64x> *work, mplapackint const lwork, mplapackint &info);
void Cunhr_col(mplapackint const m, mplapackint const n, mplapackint const nb, std::complex<_Float64x> *a, mplapackint const lda, std::complex<_Float64x> *t, mplapackint const ldt, std::complex<_Float64x> *d, mplapackint &info);
void Cunm2l(const char *side, const char *trans, mplapackint const m, mplapackint const n, mplapackint const k, std::complex<_Float64x> *a, mplapackint const lda, std::complex<_Float64x> *tau, std::complex<_Float64x> *c, mplapackint const ldc, std::complex<_Float64x> *work, mplapackint &info);
void Cunm2r(const char *side, const char *trans, mplapackint const m, mplapackint const n, mplapackint const k, std::complex<_Float64x> *a, mplapackint const lda, std::complex<_Float64x> *tau, std::complex<_Float64x> *c, mplapackint const ldc, std::complex<_Float64x> *work, mplapackint &info);
void Cunml2(const char *side, const char *trans, mplapackint const m, mplapackint const n, mplapackint const k, std::complex<_Float64x> *a, mplapackint const lda, std::complex<_Float64x> *tau, std::complex<_Float64x> *c, mplapackint const ldc, std::complex<_Float64x> *work, mplapackint &info);
void Cunmr2(const char *side, const char *trans, mplapackint const m, mplapackint const n, mplapackint const k, std::complex<_Float64x> *a, mplapackint const lda, std::complex<_Float64x> *tau, std::complex<_Float64x> *c, mplapackint const ldc, std::complex<_Float64x> *work, mplapackint &info);
void Cunmr3(const char *side, const char *trans, mplapackint const m, mplapackint const n, mplapackint const k, mplapackint const l, std::complex<_Float64x> *a, mplapackint const lda, std::complex<_Float64x> *tau, std::complex<_Float64x> *c, mplapackint const ldc, std::complex<_Float64x> *work, mplapackint &info);
void Rbdsqr(const char *uplo, mplapackint const n, mplapackint const ncvt, mplapackint const nru, mplapackint const ncc, _Float64x *d, _Float64x *e, _Float64x *vt, mplapackint const ldvt, _Float64x *u, mplapackint const ldu, _Float64x *c, mplapackint const ldc, _Float64x *work, mplapackint &info);
void Rcombssq(_Float64x *v1, _Float64x *v2);
void Rgebak(const char *job, const char *side, mplapackint const n, mplapackint const ilo, mplapackint const ihi, _Float64x *scale, mplapackint const m, _Float64x *v, mplapackint const ldv, mplapackint &info);
void Rgebd2(mplapackint const m, mplapackint const n, _Float64x *a, mplapackint const lda, _Float64x *d, _Float64x *e, _Float64x *tauq, _Float64x *taup, _Float64x *work, mplapackint &info);
void Rgebrd(mplapackint const m, mplapackint const n, _Float64x *a, mplapackint const lda, _Float64x *d, _Float64x *e, _Float64x *tauq, _Float64x *taup, _Float64x *work, mplapackint const lwork, int &info);
void Rgelq(mplapackint const m, mplapackint const n, _Float64x *a, mplapackint const lda, _Float64x *t, mplapackint const tsize, _Float64x *work, mplapackint const lwork, mplapackint &info);
void Rgelq2(mplapackint const m, mplapackint const n, _Float64x *a, mplapackint const lda, _Float64x *tau, _Float64x *work, mplapackint &info);
void Rgelqf(mplapackint const m, mplapackint const n, _Float64x *a, mplapackint const lda, _Float64x *tau, _Float64x *work, mplapackint const lwork, mplapackint &info);
void Rgelqt(mplapackint const m, mplapackint const n, mplapackint const mb, _Float64x *a, mplapackint const lda, _Float64x *t, mplapackint const ldt, _Float64x *work, mplapackint &info);
void Rgemlqt(const char *side, const char *trans, mplapackint const m, mplapackint const n, mplapackint const k, mplapackint const mb, _Float64x *v, mplapackint const ldv, _Float64x *t, mplapackint const ldt, _Float64x *c, mplapackint const ldc, _Float64x *work, mplapackint &info);
void Rgemqrt(const char *side, const char *trans, mplapackint const m, mplapackint const n, mplapackint const k, mplapackint const nb, _Float64x *v, mplapackint const ldv, _Float64x *t, mplapackint const ldt, _Float64x *c, mplapackint const ldc, _Float64x *work, mplapackint &info);
void Rgeqr(mplapackint const m, mplapackint const n, _Float64x *a, mplapackint const lda, _Float64x *t, mplapackint const tsize, _Float64x *work, mplapackint const lwork, mplapackint &info);
void Rgeqr2(mplapackint const m, mplapackint const n, _Float64x *a, mplapackint const lda, _Float64x *tau, _Float64x *work, mplapackint &info);
void Rgeqrf(mplapackint const m, mplapackint const n, _Float64x *a, mplapackint const lda, _Float64x *tau, _Float64x *work, mplapackint const lwork, mplapackint &info);
void Rgeqrt(mplapackint const m, mplapackint const n, mplapackint const nb, _Float64x *a, mplapackint const lda, _Float64x *t, mplapackint const ldt, _Float64x *work, mplapackint &info);
void Rgesv(mplapackint const n, mplapackint const nrhs, _Float64x *a, mplapackint const lda, mplapackint *ipiv, _Float64x *b, mplapackint const ldb, mplapackint &info);
void Rgesvd(const char *jobu, const char *jobvt, mplapackint const m, mplapackint const n, _Float64x *a, mplapackint const lda, _Float64x *s, _Float64x *u, mplapackint const ldu, _Float64x *vt, mplapackint const ldvt, _Float64x *work, mplapackint const lwork, mplapackint &info);
void Rgetc2(mplapackint const n, _Float64x *a, mplapackint const lda, mplapackint *ipiv, mplapackint *jpiv, mplapackint &info);
void Rgetf2(mplapackint const m, mplapackint const n, _Float64x *a, mplapackint const lda, mplapackint *ipiv, mplapackint &info);
void Rgetrf(mplapackint const m, mplapackint const n, _Float64x *a, mplapackint const lda, mplapackint *ipiv, mplapackint &info);
void Rgetrf2(mplapackint const m, mplapackint const n, _Float64x *a, mplapackint const lda, mplapackint *ipiv, mplapackint &info);
void Rgetri(mplapackint const n, _Float64x *a, mplapackint const lda, mplapackint *ipiv, _Float64x *work, mplapackint const lwork, mplapackint &info);
void Rgetrs(const char *trans, mplapackint const n, mplapackint const nrhs, _Float64x *a, mplapackint const lda, mplapackint *ipiv, _Float64x *b, mplapackint const ldb, mplapackint &info);
void Rggbak(const char *job, const char *side, mplapackint const n, mplapackint const ilo, mplapackint const ihi, _Float64x *lscale, _Float64x *rscale, mplapackint const m, _Float64x *v, mplapackint const ldv, mplapackint &info);
void Rgtsv(mplapackint const n, mplapackint const nrhs, _Float64x *dl, _Float64x *d, _Float64x *du, _Float64x *b, mplapackint const ldb, mplapackint &info);
void Rgttrf(mplapackint const n, _Float64x *dl, _Float64x *d, _Float64x *du, _Float64x *du2, mplapackint *ipiv, mplapackint &info);
void Rgtts2(mplapackint const itrans, mplapackint const n, mplapackint const nrhs, _Float64x *dl, _Float64x *d, _Float64x *du, _Float64x *du2, mplapackint *ipiv, _Float64x *b, mplapackint const ldb);
void Rla_wwaddw(mplapackint const n, _Float64x *x, _Float64x *y, _Float64x *w);
void Rlabad(_Float64x &small, _Float64x &large);
void Rlabrd(mplapackint const m, mplapackint const n, mplapackint const nb, _Float64x *a, mplapackint const lda, _Float64x *d, _Float64x *e, _Float64x *tauq, _Float64x *taup, _Float64x *x, mplapackint const ldx, _Float64x *y, mplapackint const ldy);
void Rlacpy(const char *uplo, mplapackint const m, mplapackint const n, _Float64x *a, mplapackint const lda, _Float64x *b, mplapackint const ldb);
void Rladiv(_Float64x const &a, _Float64x const &b, _Float64x const &c, _Float64x const &d, _Float64x &p, _Float64x &q);
void Rladiv(_Float64x const &a, _Float64x const &b, _Float64x const &c, _Float64x const &d, _Float64x &p, _Float64x &q);
void Rladiv1(_Float64x &a, _Float64x const &b, _Float64x const &c, _Float64x const &d, _Float64x &p, _Float64x &q);
void Rladiv1(_Float64x &a, _Float64x const &b, _Float64x const &c, _Float64x const &d, _Float64x &p, _Float64x &q);
void Rlae2(_Float64x const a, _Float64x const b, _Float64x const c, _Float64x &rt1, _Float64x &rt2);
void Rlaed5(mplapackint const i, _Float64x *d, _Float64x *z, _Float64x *delta, _Float64x const rho, _Float64x &dlam);
void Rlaev2(_Float64x const a, _Float64x const b, _Float64x const c, _Float64x &rt1, _Float64x &rt2, _Float64x &cs1, _Float64x &sn1);
void Rlagtf(mplapackint const n, _Float64x *a, _Float64x const lambda, _Float64x *b, _Float64x *c, _Float64x const tol, _Float64x *d, mplapackint *in, mplapackint &info);
void Rlagtm(const char *trans, mplapackint const n, mplapackint const nrhs, _Float64x const alpha, _Float64x *dl, _Float64x *d, _Float64x *du, _Float64x *x, mplapackint const ldx, _Float64x const beta, _Float64x *b, mplapackint const ldb);
void Rlaic1(mplapackint const job, mplapackint const j, _Float64x *x, _Float64x const sest, _Float64x *w, _Float64x const gamma, _Float64x &sestpr, _Float64x &s, _Float64x &c);
void Rlamrg(mplapackint const n1, mplapackint const n2, _Float64x *a, mplapackint const dtrd1, mplapackint const dtrd2, mplapackint *index);
void Rlanv2(_Float64x &a, _Float64x &b, _Float64x &c, _Float64x &d, _Float64x &rt1r, _Float64x &rt1i, _Float64x &rt2r, _Float64x &rt2i, _Float64x &cs, _Float64x &sn);
void Rlaorhr_col_getrfnp(mplapackint const m, mplapackint const n, _Float64x *a, mplapackint const lda, _Float64x *d, mplapackint &info);
void Rlaorhr_col_getrfnp2(mplapackint const m, mplapackint const n, _Float64x *a, mplapackint const lda, _Float64x *d, mplapackint &info);
void Rlapmr(bool const forwrd, mplapackint const m, mplapackint const n, _Float64x *x, mplapackint const ldx, mplapackint *k);
void Rlapmt(bool const forwrd, mplapackint const m, mplapackint const n, _Float64x *x, mplapackint const ldx, mplapackint *k);
void Rlaqgb(mplapackint const m, mplapackint const n, mplapackint const kl, mplapackint const ku, _Float64x *ab, mplapackint const ldab, _Float64x *r, _Float64x *c, _Float64x const rowcnd, _Float64x const colcnd, _Float64x const amax, char *equed);
void Rlaqge(mplapackint const m, mplapackint const n, _Float64x *a, mplapackint const lda, _Float64x *r, _Float64x *c, _Float64x const rowcnd, _Float64x const colcnd, _Float64x const amax, char *equed);
void Rlaqr1(mplapackint const n, _Float64x *h, mplapackint const ldh, _Float64x const sr1, _Float64x const si1, _Float64x const sr2, _Float64x const si2, _Float64x *v);
void Rlaqsb(const char *uplo, mplapackint const n, mplapackint const kd, _Float64x *ab, mplapackint const ldab, _Float64x *s, _Float64x const scond, _Float64x const amax, char *equed);
void Rlaqsp(const char *uplo, mplapackint const n, _Float64x *ap, _Float64x *s, _Float64x const scond, _Float64x const amax, char *equed);
void Rlaqsy(const char *uplo, mplapackint const n, _Float64x *a, mplapackint const lda, _Float64x *s, _Float64x const scond, _Float64x const amax, char *equed);
void Rlar1v(mplapackint const n, mplapackint const b1, mplapackint const bn, _Float64x const lambda, _Float64x *d, _Float64x *l, _Float64x *ld, _Float64x *lld, _Float64x const pivmin, _Float64x const gaptol, _Float64x *z, bool const wantnc, mplapackint &negcnt, _Float64x &ztz, _Float64x &mingma, mplapackint &r, mplapackint *isuppz, _Float64x &nrminv, _Float64x &resid, _Float64x &rqcorr, _Float64x *work);
void Rlar2v(mplapackint const n, _Float64x *x, _Float64x *y, _Float64x *z, mplapackint const incx, _Float64x *c, _Float64x *s, mplapackint const incc);
void Rlarf(const char *side, mplapackint const m, mplapackint const n, _Float64x *v, mplapackint const incv, _Float64x const tau, _Float64x *c, mplapackint const ldc, _Float64x *work);
void Rlarfb(const char *side, const char *trans, const char *direct, const char *storev, mplapackint const m, mplapackint const n, mplapackint const k, _Float64x *v, mplapackint const ldv, _Float64x *t, mplapackint const ldt, _Float64x *c, mplapackint const ldc, _Float64x *work, mplapackint const ldwork);
void Rlarfb_gett(const char *ident, mplapackint const m, mplapackint const n, mplapackint const k, _Float64x *t, mplapackint const ldt, _Float64x *a, mplapackint const lda, _Float64x *b, mplapackint const ldb, _Float64x *work, mplapackint const ldwork);
void Rlarfg(mplapackint const n, _Float64x &alpha, _Float64x *x, mplapackint const incx, _Float64x &tau);
void Rlarfgp(mplapackint const n, _Float64x &alpha, _Float64x *x, mplapackint const incx, _Float64x &tau);
void Rlarft(const char *direct, const char *storev, mplapackint const n, mplapackint const k, _Float64x *v, mplapackint const ldv, _Float64x *tau, _Float64x *t, mplapackint const ldt);
void Rlarfx(const char *side, mplapackint const m, mplapackint const n, _Float64x *v, _Float64x const tau, _Float64x *c, mplapackint const ldc, _Float64x *work);
void Rlarfy(const char *uplo, mplapackint const n, _Float64x *v, mplapackint const incv, _Float64x const tau, _Float64x *c, mplapackint const ldc, _Float64x *work);
void Rlargv(mplapackint const n, _Float64x *x, mplapackint const incx, _Float64x *y, mplapackint const incy, _Float64x *c, mplapackint const incc);
void Rlarra(mplapackint const n, _Float64x *d, _Float64x *e, _Float64x *e2, _Float64x const spltol, _Float64x const tnrm, mplapackint &nsplit, mplapackint *isplit, mplapackint &info);
void Rlarrc(const char *jobt, mplapackint const n, _Float64x const vl, _Float64x const vu, _Float64x *d, _Float64x *e, _Float64x const, mplapackint &eigcnt, mplapackint &lcnt, mplapackint &rcnt, mplapackint &info);
void Rlarrj(mplapackint const n, _Float64x *d, _Float64x *e2, mplapackint const ifirst, mplapackint const ilast, _Float64x const rtol, mplapackint const offset, _Float64x *w, _Float64x *werr, _Float64x *work, mplapackint *iwork, _Float64x const pivmin, _Float64x const spdiam, mplapackint &info);
void Rlarrr(mplapackint const n, _Float64x *d, _Float64x *e, mplapackint &info);
void Rlarscl2(mplapackint const m, mplapackint const n, _Float64x *d, _Float64x *x, mplapackint const ldx);
void Rlartg(_Float64x const f, _Float64x const g, _Float64x &cs, _Float64x &sn, _Float64x &r);
void Rlartgp(_Float64x const f, _Float64x const g, _Float64x &cs, _Float64x &sn, _Float64x &r);
void Rlartgs(_Float64x const x, _Float64x const y, _Float64x const sigma, _Float64x cs, _Float64x sn);
void Rlartv(mplapackint const n, _Float64x *x, mplapackint const incx, _Float64x *y, mplapackint const incy, _Float64x *c, _Float64x *s, mplapackint const incc);
void Rlarz(const char *side, mplapackint const m, mplapackint const n, mplapackint const l, _Float64x *v, mplapackint const incv, _Float64x const tau, _Float64x *c, mplapackint const ldc, _Float64x *work);
void Rlarzt(const char *direct, const char *storev, mplapackint const n, mplapackint const k, _Float64x *v, mplapackint const ldv, _Float64x *tau, _Float64x *t, mplapackint const ldt);
void Rlas2(_Float64x const f, _Float64x const g, _Float64x const h, _Float64x &ssmin, _Float64x &ssmax);
void Rlascl(const char *type, mplapackint const kl, mplapackint const ku, _Float64x const cfrom, _Float64x const cto, mplapackint const m, mplapackint const n, _Float64x *a, mplapackint const lda, mplapackint &info);
void Rlascl2(mplapackint const m, mplapackint const n, _Float64x *d, _Float64x *x, mplapackint const ldx);
void Rlasd5(mplapackint const i, _Float64x *d, _Float64x *z, _Float64x *delta, _Float64x const rho, _Float64x &dsigma, _Float64x *work);
void Rlaset(const char *uplo, mplapackint const m, mplapackint const n, _Float64x const alpha, _Float64x const beta, _Float64x *a, mplapackint const lda);
void Rlasq1(mplapackint const n, _Float64x *d, _Float64x *e, _Float64x *work, mplapackint &info);
void Rlasq2(mplapackint const n, _Float64x *z, mplapackint &info);
void Rlasq3(mplapackint const i0, mplapackint &n0, _Float64x *z, mplapackint &pp, _Float64x &dmin, _Float64x &sigma, _Float64x &desig, _Float64x &qmax, mplapackint &nfail, mplapackint &iter, mplapackint &ndiv, bool const ieee, mplapackint &ttype, _Float64x const dmin1, _Float64x &dmin2, _Float64x const dn, _Float64x const dn1, _Float64x const dn2, _Float64x const g, _Float64x &tau);
void Rlasq4(mplapackint const i0, mplapackint const n0, _Float64x *z, mplapackint const pp, mplapackint const n0in, _Float64x const dmin, _Float64x const dmin1, _Float64x const dmin2, _Float64x const dn, _Float64x const dn1, _Float64x const dn2, _Float64x &tau, mplapackint &ttype, _Float64x &g);
void Rlasq6(mplapackint const i0, mplapackint const n0, _Float64x *z, mplapackint const pp, _Float64x &dmin, _Float64x &dmin1, _Float64x &dmin2, _Float64x &dn, _Float64x &dnm1, _Float64x &dnm2);
void Rlasr(const char *side, const char *pivot, const char *direct, mplapackint const m, mplapackint const n, _Float64x *c, _Float64x *s, _Float64x *a, mplapackint const lda);
void Rlasrt(const char *id, mplapackint const n, _Float64x *d, mplapackint &info);
void Rlassq(mplapackint const n, _Float64x *x, mplapackint const incx, _Float64x &scale, _Float64x &sumsq);
void Rlasv2(_Float64x const f, _Float64x const g, _Float64x const h, _Float64x &ssmin, _Float64x &ssmax, _Float64x &snr, _Float64x &csr, _Float64x &snl, _Float64x &csl);
void Rlaswlq(mplapackint const m, mplapackint const n, mplapackint const mb, mplapackint const nb, _Float64x *a, mplapackint const lda, _Float64x *t, mplapackint const ldt, _Float64x *work, mplapackint const lwork, mplapackint &info);
void Rlaswp(mplapackint const n, _Float64x *a, mplapackint const lda, mplapackint const k1, mplapackint const k2, mplapackint *ipiv, mplapackint const incx);
void Rlasyf(const char *uplo, mplapackint const n, mplapackint const nb, mplapackint &kb, _Float64x *a, mplapackint const lda, mplapackint *ipiv, _Float64x *w, mplapackint const ldw, mplapackint &info);
void Rlasyf_aa(const char *uplo, mplapackint const j1, mplapackint const m, mplapackint const nb, _Float64x *a, mplapackint const lda, mplapackint *ipiv, _Float64x *h, mplapackint const ldh, _Float64x *work);
void Rlasyf_rk(const char *uplo, mplapackint const n, mplapackint const nb, mplapackint &kb, _Float64x *a, mplapackint const lda, _Float64x *e, mplapackint *ipiv, _Float64x *w, mplapackint const ldw, mplapackint &info);
void Rlasyf_rook(const char *uplo, mplapackint const n, mplapackint const nb, mplapackint &kb, _Float64x *a, mplapackint const lda, mplapackint *ipiv, _Float64x *w, mplapackint const ldw, mplapackint &info);
void Rlatrd(const char *uplo, mplapackint const n, mplapackint const nb, _Float64x *a, mplapackint const lda, _Float64x *e, _Float64x *tau, _Float64x *w, mplapackint const ldw);
void Rlatsqr(mplapackint const m, mplapackint const n, mplapackint const mb, mplapackint const nb, _Float64x *a, mplapackint const lda, _Float64x *t, mplapackint const ldt, _Float64x *work, mplapackint const lwork, mplapackint &info);
void Rlauu2(const char *uplo, mplapackint const n, _Float64x *a, mplapackint const lda, mplapackint &info);
void Rlauum(const char *uplo, mplapackint const n, _Float64x *a, mplapackint const lda, mplapackint &info);
void Rorbdb5(mplapackint const m1, mplapackint const m2, mplapackint const n, _Float64x *x1, mplapackint const incx1, _Float64x *x2, mplapackint const incx2, _Float64x *q1, mplapackint const ldq1, _Float64x *q2, mplapackint const ldq2, _Float64x *work, mplapackint const lwork, mplapackint &info);
void Rorbdb6(mplapackint const m1, mplapackint const m2, mplapackint const n, _Float64x *x1, mplapackint const incx1, _Float64x *x2, mplapackint const incx2, _Float64x *q1, mplapackint const ldq1, _Float64x *q2, mplapackint const ldq2, _Float64x *work, mplapackint const lwork, mplapackint &info);
void Rorg2l(mplapackint const m, mplapackint const n, mplapackint const k, _Float64x *a, mplapackint const lda, _Float64x *tau, _Float64x *work, mplapackint &info);
void Rorg2r(mplapackint const m, mplapackint const n, mplapackint const k, _Float64x *a, mplapackint const lda, _Float64x *tau, _Float64x *work, mplapackint &info);
void Rorgbr(const char *vect, mplapackint const m, mplapackint const n, mplapackint const k, _Float64x *a, mplapackint const lda, _Float64x *tau, _Float64x *work, mplapackint const lwork, mplapackint &info);
void Rorghr(mplapackint const n, mplapackint const ilo, mplapackint const ihi, _Float64x *a, mplapackint const lda, _Float64x *tau, _Float64x *work, mplapackint const lwork, mplapackint &info);
void Rorgl2(mplapackint const m, mplapackint const n, mplapackint const k, _Float64x *a, mplapackint const lda, _Float64x *tau, _Float64x *work, mplapackint &info);
void Rorglq(mplapackint const m, mplapackint const n, mplapackint const k, _Float64x *a, mplapackint const lda, _Float64x *tau, _Float64x *work, mplapackint const lwork, mplapackint &info);
void Rorgql(mplapackint const m, mplapackint const n, mplapackint const k, _Float64x *a, mplapackint const lda, _Float64x *tau, _Float64x *work, mplapackint const lwork, mplapackint &info);
void Rorgqr(mplapackint const m, mplapackint const n, mplapackint const k, _Float64x *a, mplapackint const lda, _Float64x *tau, _Float64x *work, mplapackint const lwork, mplapackint &info);
void Rorgtr(const char *uplo, mplapackint const n, _Float64x *a, mplapackint const lda, _Float64x *tau, _Float64x *work, mplapackint const lwork, mplapackint &info);
void Rorhr_col(mplapackint const m, mplapackint const n, mplapackint const nb, _Float64x *a, mplapackint const lda, _Float64x *t, mplapackint const ldt, _Float64x *d, mplapackint &info);
void Rorm2r(const char *side, const char *trans, mplapackint const m, mplapackint const n, mplapackint const k, _Float64x *a, mplapackint const lda, _Float64x *tau, _Float64x *c, mplapackint const ldc, _Float64x *work, mplapackint &info);
void Rormbr(const char *vect, const char *side, const char *trans, mplapackint const m, mplapackint const n, mplapackint const k, _Float64x *a, mplapackint const lda, _Float64x *tau, _Float64x *c, mplapackint const ldc, _Float64x *work, mplapackint const lwork, mplapackint &info);
void Rorml2(const char *side, const char *trans, mplapackint const m, mplapackint const n, mplapackint const k, _Float64x *a, mplapackint const lda, _Float64x *tau, _Float64x *c, mplapackint const ldc, _Float64x *work, mplapackint &info);
void Rormlq(const char *side, const char *trans, mplapackint const m, mplapackint const n, mplapackint const k, _Float64x *a, mplapackint const lda, _Float64x *tau, _Float64x *c, mplapackint const ldc, _Float64x *work, mplapackint const lwork, mplapackint &info);
void Rormql(const char *side, const char *trans, mplapackint const m, mplapackint const n, mplapackint const k, _Float64x *a, mplapackint const lda, _Float64x *tau, _Float64x *c, mplapackint const ldc, _Float64x *work, mplapackint const lwork, mplapackint &info);
void Rormql(const char *side, const char *trans, mplapackint const m, mplapackint const n, mplapackint const k, _Float64x *a, mplapackint const lda, _Float64x *tau, _Float64x *c, mplapackint const ldc, _Float64x *work, mplapackint const lwork, mplapackint &info);
void Rormqr(const char *side, const char *trans, mplapackint const m, mplapackint const n, mplapackint const k, _Float64x *a, mplapackint const lda, _Float64x *tau, _Float64x *c, mplapackint const ldc, _Float64x *work, mplapackint const lwork, mplapackint &info);
void Rpbequ(const char *uplo, mplapackint const n, mplapackint const kd, _Float64x *ab, mplapackint const ldab, _Float64x *s, _Float64x &scond, _Float64x &amax, mplapackint &info);
void Rpbsv(const char *uplo, mplapackint const n, mplapackint const kd, mplapackint const nrhs, _Float64x *ab, mplapackint const ldab, _Float64x *b, mplapackint const ldb, mplapackint &info);
void Rpbtrs(const char *uplo, mplapackint const n, mplapackint const kd, mplapackint const nrhs, _Float64x *ab, mplapackint const ldab, _Float64x *b, mplapackint const ldb, mplapackint &info);
void Rpoequ(mplapackint const n, _Float64x *a, mplapackint const lda, _Float64x *s, _Float64x &scond, _Float64x &amax, mplapackint &info);
void Rpoequb(mplapackint const n, _Float64x *a, mplapackint const lda, _Float64x *s, _Float64x &scond, _Float64x &amax, mplapackint &info);
void Rposv(const char *uplo, mplapackint const n, mplapackint const nrhs, _Float64x *a, mplapackint const lda, _Float64x *b, mplapackint const ldb, mplapackint &info);
void Rposvx(const char *fact, const char *uplo, mplapackint const n, mplapackint const nrhs, _Float64x *a, mplapackint const lda, _Float64x *af, mplapackint const ldaf, char *equed, _Float64x *s, _Float64x *b, mplapackint const ldb, _Float64x *x, mplapackint const ldx, _Float64x &rcond, _Float64x *ferr, _Float64x *berr, _Float64x *work, mplapackint *iwork, mplapackint &info);
void Rpotf2(const char *uplo, mplapackint const n, _Float64x *a, mplapackint const lda, mplapackint &info);
void Rpotrf(const char *uplo, mplapackint const n, _Float64x *a, mplapackint const lda, mplapackint &info);
void Rpotrf2(const char *uplo, mplapackint const n, _Float64x *a, mplapackint const lda, mplapackint &info);
void Rpotri(const char *uplo, mplapackint const n, _Float64x *a, mplapackint const lda, mplapackint &info);
void Rpotrs(const char *uplo, mplapackint const n, mplapackint const nrhs, _Float64x *a, mplapackint const lda, _Float64x *b, mplapackint const ldb, mplapackint &info);
void Rppequ(const char *uplo, mplapackint const n, _Float64x *ap, _Float64x *s, _Float64x &scond, _Float64x &amax, mplapackint &info);
void Rppsv(const char *uplo, mplapackint const n, mplapackint const nrhs, _Float64x *ap, _Float64x *b, mplapackint const ldb, mplapackint &info);
void Rpptrs(const char *uplo, mplapackint const n, mplapackint const nrhs, _Float64x *ap, _Float64x *b, mplapackint const ldb, mplapackint &info);
void Rptcon(mplapackint const n, _Float64x *d, _Float64x *e, _Float64x const anorm, _Float64x &rcond, _Float64x *work, mplapackint &info);
void Rptsv(mplapackint const n, mplapackint const nrhs, _Float64x *d, _Float64x *e, _Float64x *b, mplapackint const ldb, mplapackint &info);
void Rptsvx(const char *fact, mplapackint const n, mplapackint const nrhs, _Float64x *d, _Float64x *e, _Float64x *df, _Float64x *ef, _Float64x *b, mplapackint const ldb, _Float64x *x, mplapackint const ldx, _Float64x &rcond, _Float64x *ferr, _Float64x *berr, _Float64x *work, mplapackint &info);
void Rpttrf(mplapackint const n, _Float64x *d, _Float64x *e, mplapackint &info);
void Rpttrs(mplapackint const n, mplapackint const nrhs, _Float64x *d, _Float64x *e, _Float64x *b, mplapackint const ldb, mplapackint &info);
void Rptts2(mplapackint const n, mplapackint const nrhs, _Float64x *d, _Float64x *e, _Float64x *b, mplapackint const ldb);
void Rrscl(mplapackint const n, _Float64x const sa, _Float64x *sx, mplapackint const incx);
void Rsfrk(const char *transr, const char *uplo, const char *trans, mplapackint const n, mplapackint const k, _Float64x const alpha, _Float64x *a, mplapackint const lda, _Float64x const beta, _Float64x *c);
void Rspsv(const char *uplo, mplapackint const n, mplapackint const nrhs, _Float64x *ap, mplapackint *ipiv, _Float64x *b, mplapackint const ldb, mplapackint &info);
void Rsteqr(const char *compz, mplapackint const n, _Float64x *d, _Float64x *e, _Float64x *z, mplapackint const ldz, _Float64x *work, mplapackint &info);
void Rsterf(mplapackint const n, _Float64x *d, _Float64x *e, mplapackint &info);
void Rstev(const char *jobz, mplapackint const n, _Float64x *d, _Float64x *e, _Float64x *z, mplapackint const ldz, _Float64x *work, mplapackint &info);
void Rstevd(const char *jobz, mplapackint const n, _Float64x *d, _Float64x *e, _Float64x *z, mplapackint const ldz, _Float64x *work, mplapackint const lwork, mplapackint *iwork, mplapackint const liwork, mplapackint &info);
void Rsyconv(const char *uplo, const char *way, mplapackint const n, _Float64x *a, mplapackint const lda, mplapackint *ipiv, _Float64x *e, mplapackint &info);
void Rsyconvf(const char *uplo, const char *way, mplapackint const n, _Float64x *a, mplapackint const lda, _Float64x *e, mplapackint *ipiv, mplapackint &info);
void Rsyconvf_rook(const char *uplo, const char *way, mplapackint const n, _Float64x *a, mplapackint const lda, _Float64x *e, mplapackint *ipiv, mplapackint &info);
void Rsyequb(const char *uplo, mplapackint const n, _Float64x *a, mplapackint const lda, _Float64x *s, _Float64x &scond, _Float64x &amax, _Float64x *work, mplapackint &info);
void Rsyev(const char *jobz, const char *uplo, mplapackint const n, _Float64x *a, mplapackint const lda, _Float64x *w, _Float64x *work, mplapackint const lwork, mplapackint &info);
void Rsyevd(const char *jobz, const char *uplo, mplapackint const n, _Float64x *a, mplapackint const lda, _Float64x *w, _Float64x *work, mplapackint const lwork, mplapackint *iwork, mplapackint const liwork, mplapackint &info);
void Rsygs2(mplapackint const itype, const char *uplo, mplapackint const n, _Float64x *a, mplapackint const lda, _Float64x *b, mplapackint const ldb, mplapackint &info);
void Rsygst(mplapackint const itype, const char *uplo, mplapackint const n, _Float64x *a, mplapackint const lda, _Float64x *b, mplapackint const ldb, mplapackint &info);
void Rsysv(const char *uplo, mplapackint const n, mplapackint const nrhs, _Float64x *a, mplapackint const lda, mplapackint *ipiv, _Float64x *b, mplapackint const ldb, _Float64x *work, mplapackint const lwork, mplapackint &info);
void Rsysv_aa(const char *uplo, mplapackint const n, mplapackint const nrhs, _Float64x *a, mplapackint const lda, mplapackint *ipiv, _Float64x *b, mplapackint const ldb, _Float64x *work, mplapackint const lwork, mplapackint &info);
void Rsysv_aa_2stage(const char *uplo, mplapackint const n, mplapackint const nrhs, _Float64x *a, mplapackint const lda, _Float64x *tb, mplapackint const ltb, mplapackint *ipiv, mplapackint *ipiv2, _Float64x *b, mplapackint const ldb, _Float64x *work, mplapackint const lwork, mplapackint &info);
void Rsysv_rk(const char *uplo, mplapackint const n, mplapackint const nrhs, _Float64x *a, mplapackint const lda, _Float64x *e, mplapackint *ipiv, _Float64x *b, mplapackint const ldb, _Float64x *work, mplapackint const lwork, mplapackint &info);
void Rsysv_rook(const char *uplo, mplapackint const n, mplapackint const nrhs, _Float64x *a, mplapackint const lda, mplapackint *ipiv, _Float64x *b, mplapackint const ldb, _Float64x *work, mplapackint const lwork, mplapackint &info);
void Rsysvx(const char *fact, const char *uplo, mplapackint const n, mplapackint const nrhs, _Float64x *a, mplapackint const lda, _Float64x *af, mplapackint const ldaf, mplapackint *ipiv, _Float64x *b, mplapackint const ldb, _Float64x *x, mplapackint const ldx, _Float64x &rcond, _Float64x *ferr, _Float64x *berr, _Float64x *work, mplapackint const lwork, mplapackint *iwork, mplapackint &info);
void Rsytd2(const char *uplo, mplapackint const n, _Float64x *a, mplapackint const lda, _Float64x *d, _Float64x *e, _Float64x *tau, mplapackint &info);
void Rsytf2(const char *uplo, mplapackint const n, _Float64x *a, mplapackint const lda, mplapackint *ipiv, mplapackint &info);
void Rsytf2_rk(const char *uplo, mplapackint const n, _Float64x *a, mplapackint const lda, _Float64x *e, mplapackint *ipiv, mplapackint &info);
void Rsytf2_rook(const char *uplo, mplapackint const n, _Float64x *a, mplapackint const lda, mplapackint *ipiv, mplapackint &info);
void Rsytrd(const char *uplo, mplapackint const n, _Float64x *a, mplapackint const lda, _Float64x *d, _Float64x *e, _Float64x *tau, _Float64x *work, mplapackint const lwork, mplapackint &info);
void Rsytri(const char *uplo, mplapackint const n, _Float64x *a, mplapackint const lda, mplapackint *ipiv, _Float64x *work, mplapackint &info);
void Rsytri2(const char *uplo, mplapackint const n, _Float64x *a, mplapackint const lda, mplapackint *ipiv, _Float64x *work, mplapackint const lwork, mplapackint &info);
void Rsytri_3(const char *uplo, mplapackint const n, _Float64x *a, mplapackint const lda, _Float64x *e, mplapackint *ipiv, _Float64x *work, mplapackint const lwork, mplapackint &info);
void Rsytri_rook(const char *uplo, mplapackint const n, _Float64x *a, mplapackint const lda, mplapackint *ipiv, _Float64x *work, mplapackint &info);
void Rsytrs(const char *uplo, mplapackint const n, mplapackint const nrhs, _Float64x *a, mplapackint const lda, mplapackint *ipiv, _Float64x *b, mplapackint const ldb, mplapackint &info);
void Rsytrs2(const char *uplo, mplapackint const n, mplapackint const nrhs, _Float64x *a, mplapackint const lda, mplapackint *ipiv, _Float64x *b, mplapackint const ldb, _Float64x *work, mplapackint &info);
void Rsytrs_3(const char *uplo, mplapackint const n, mplapackint const nrhs, _Float64x *a, mplapackint const lda, _Float64x *e, mplapackint *ipiv, _Float64x *b, mplapackint const ldb, mplapackint &info);
void Rsytrs_aa(const char *uplo, mplapackint const n, mplapackint const nrhs, _Float64x *a, mplapackint const lda, mplapackint *ipiv, _Float64x *b, mplapackint const ldb, _Float64x *work, mplapackint const lwork, mplapackint &info);
void Rsytrs_aa_2stage(const char *uplo, mplapackint const n, mplapackint const nrhs, _Float64x *a, mplapackint const lda, _Float64x *tb, mplapackint const ltb, mplapackint *ipiv, mplapackint *ipiv2, _Float64x *b, mplapackint const ldb, mplapackint &info);
void Rsytrs_rook(const char *uplo, mplapackint const n, mplapackint const nrhs, _Float64x *a, mplapackint const lda, mplapackint *ipiv, _Float64x *b, mplapackint const ldb, mplapackint &info);
void Rtbtrs(const char *uplo, const char *trans, const char *diag, mplapackint const n, mplapackint const kd, mplapackint const nrhs, _Float64x *ab, mplapackint const ldab, _Float64x *b, mplapackint const ldb, mplapackint &info);
void Rtgexc(bool const wantq, bool const wantz, mplapackint const n, _Float64x *a, mplapackint const lda, _Float64x *b, mplapackint const ldb, _Float64x *q, mplapackint const ldq, _Float64x *z, mplapackint const ldz, mplapackint &ifst, mplapackint &ilst, _Float64x *work, mplapackint const lwork, mplapackint &info);
void Rtplqt(mplapackint const m, mplapackint const n, mplapackint const l, mplapackint const mb, _Float64x *a, mplapackint const lda, _Float64x *b, mplapackint const ldb, _Float64x *t, mplapackint const ldt, _Float64x *work, mplapackint &info);
void Rtpmlqt(const char *side, const char *trans, mplapackint const m, mplapackint const n, mplapackint const k, mplapackint const l, mplapackint const mb, _Float64x *v, mplapackint const ldv, _Float64x *t, mplapackint const ldt, _Float64x *a, mplapackint const lda, _Float64x *b, mplapackint const ldb, _Float64x *work, mplapackint &info);
void Rtpmqrt(const char *side, const char *trans, mplapackint const m, mplapackint const n, mplapackint const k, mplapackint const l, mplapackint const nb, _Float64x *v, mplapackint const ldv, _Float64x *t, mplapackint const ldt, _Float64x *a, mplapackint const lda, _Float64x *b, mplapackint const ldb, _Float64x *work, mplapackint &info);
void Rtpqrt(mplapackint const m, mplapackint const n, mplapackint const l, mplapackint const nb, _Float64x *a, mplapackint const lda, _Float64x *b, mplapackint const ldb, _Float64x *t, mplapackint const ldt, _Float64x *work, mplapackint &info);
void Rtprfb(const char *side, const char *trans, const char *direct, const char *storev, mplapackint const m, mplapackint const n, mplapackint const k, mplapackint const l, _Float64x *v, mplapackint const ldv, _Float64x *t, mplapackint const ldt, _Float64x *a, mplapackint const lda, _Float64x *b, mplapackint const ldb, _Float64x *work, mplapackint const ldwork);
void Rtptrs(const char *uplo, const char *trans, const char *diag, mplapackint const n, mplapackint const nrhs, _Float64x *ap, _Float64x *b, mplapackint const ldb, mplapackint &info);
void Rtpttr(const char *uplo, mplapackint const n, _Float64x *ap, _Float64x *a, mplapackint const lda, mplapackint &info);
void Rtrexc(const char *compq, mplapackint const n, _Float64x *t, mplapackint const ldt, _Float64x *q, mplapackint const ldq, mplapackint &ifst, mplapackint &ilst, _Float64x *work, mplapackint &info);
void Rtrti2(const char *uplo, const char *diag, mplapackint const n, _Float64x *a, mplapackint const lda, mplapackint &info);
void Rtrtri(const char *uplo, const char *diag, mplapackint const n, _Float64x *a, mplapackint const lda, mplapackint &info);
void Rtrtrs(const char *uplo, const char *trans, const char *diag, mplapackint const n, mplapackint const nrhs, _Float64x *a, mplapackint const lda, _Float64x *b, mplapackint const ldb, mplapackint &info);
void Rtrttp(const char *uplo, mplapackint const n, _Float64x *a, mplapackint const lda, _Float64x *ap, mplapackint &info);
#endif
