/*
 * Copyright (c) 2021
 *	Nakata, Maho
 * 	All rights reserved.
 *
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

#ifndef _MPLAPACK_UTILS__FLOAT64X_H_
#define _MPLAPACK_UTILS__FLOAT64X_H_

%%MPLAPACK__FLOAT64X___FLOAT80_%%

#if defined ___MPLAPACK__FLOAT64X_IS_LONGDOUBLE___
//#if defined(__INTEL_COMPILER)
typedef long double _Float64x;
//#endif

inline _Float64x pow(const _Float64x &a, const _Float64x &b) {
    return powl(a, b);
}

inline _Float64x pow(const long &a, const long &b) {
    return powl((_Float64x)a, (_Float64x)b);
}

inline _Float64x pow(const int &a, const long &b) {
    return powl((_Float64x)a, (_Float64x)b);
}

inline _Float64x pow(const _Float64x &a, const long &b) {
    return powl(a, (_Float64x)b);
}

#if defined __MPLAPACK_MATGEN_HACK__
inline _Float64x sqrt(_Float64x a) { return sqrtl(a); } //req'ed by matgen
#endif
inline _Float64x sin(_Float64x &a) { return sinl(a); }
inline _Float64x cos(_Float64x &a) { return cosl(a); }

namespace std {
inline _Float64x sin(const _Float64x &a) { return sinl(a); }
inline _Float64x exp(const _Float64x &a) { return expl(a); }
inline _Float64x cos(const _Float64x &a) { return cosl(a); }
//inline _Float64x log(const _Float64x &a) { return logl(a); }
//inline _Float64x sqrt(_Float64x &a) { return sqrtl(a); }
}

// implementation of sign transfer function.
inline _Float64x sign(_Float64x a, _Float64x b) {
    _Float64x mtmp;
    mtmp = std::abs(a);
    if (b < 0.0) {
        mtmp = -mtmp;
    }
    return mtmp;
}

inline double cast2double(_Float64x a) { return (double)a; }

inline long nint(_Float64x a) {
    long i;
    _Float64x tmp;
    a = a + 0.5;
    tmp = floor(a);
    i = (long)tmp;
    return i;
}

inline _Float64x castREAL__Float64x(mplapackint n) {
    _Float64x ret = n;
    return ret;
}

inline mplapackint castINTEGER__Float64x(_Float64x a) {
    mplapackint i = a;
    return i;
}

inline _Float64x pi(_Float64x dummy) {
#if defined __APPLE__ // __MATH_LONG_DOUBLE_CONSTANTS looks broken
    return 0xc.90fdaa22168c235p-2L;
#elif defined __MINGW32__
    return 0xc.90fdaa22168c235p-2L;
#else
    return M_PIl;
#endif
}

#endif

#endif