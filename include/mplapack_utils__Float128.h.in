/*
 * Copyright (c) 2012-2021
 *	Nakata, Maho
 * 	All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

#ifndef _MUTILS__FLOAT128_H_
#define _MUTILS__FLOAT128_H_

#define ___MPLAPACK__FLOAT128_ONLY___

#if !defined __MPLAPACK_BUFLEN__
#define __MPLAPACK_BUFLEN__ 1024
#endif

#if defined ___MPLAPACK_BUILD_WITH__FLOAT128___ && (defined ___MPLAPACK__FLOAT128_ONLY___ || defined ___MPLAPACK__FLOAT128_IS_LONGDOUBLE___)
#include <string.h>

inline void printnum(_Float128 rtmp) {
    char buf[__MPLAPACK_BUFLEN__];
    strfromf128(buf, sizeof(buf), "%.36g", rtmp);
    printf("%s", buf);
}
inline void printnum_short(_Float128 rtmp) {
    char buf[__MPLAPACK_BUFLEN__];
    strfromf128(buf, sizeof(buf), "%.16g", rtmp);
    printf("%s", buf);
}
inline void printnum(std::complex<_Float128> rtmp) {
    char buf[__MPLAPACK_BUFLEN__];
    strfromf128(buf, sizeof(buf), "%.36g", rtmp.real());
    printf("%s", buf);
    strfromf128(buf, sizeof(buf), "%.36g", rtmp.imag());
    printf("%s", buf);
    printf("i");
}
inline void printnum_short(std::complex<_Float128> rtmp) {
    char buf[__MPLAPACK_BUFLEN__];
    strfromf128(buf, sizeof(buf), "%.16g", rtmp.real());
    printf("%s", buf);
    strfromf128(buf, sizeof(buf), "%.16g", rtmp.imag());
    printf("%s", buf);
    printf("i");
}
inline void sprintnum(char *buf, _Float128 rtmp) { strfromf128(buf, sizeof(buf), "%.36g", rtmp); }
inline void sprintnum_short(char *buf, _Float128 rtmp) { strfromf128(buf, sizeof(buf), "%.16g", rtmp); }
inline void sprintnum(char *buf, std::complex<_Float128> rtmp) {
    char buf1[__MPLAPACK_BUFLEN__], buf2[__MPLAPACK_BUFLEN__];
    strfromf128(buf1, sizeof(buf2), "%.36g", rtmp.real());
    strcat(buf, buf1);
    strfromf128(buf2, sizeof(buf2), "%.36g", rtmp.imag());
    strcat(buf, buf2);
    strcat(buf, "i");
}
inline void sprintnum_short(char *buf, std::complex<_Float128> rtmp) {
    char buf1[__MPLAPACK_BUFLEN__], buf2[__MPLAPACK_BUFLEN__];
    strfromf128(buf1, sizeof(buf2), "%.16g", rtmp.real());
    strcat(buf, buf1);
    strfromf128(buf2, sizeof(buf2), "%.16g", rtmp.imag());
    strcat(buf, buf2);
    strcat(buf, "i");
}

inline _Float128 pow(const _Float128 &a, const _Float128 &b) { return powf128(a, b); }
inline _Float128 pow(const long &a, const long &b) { return powf128((_Float128)a, (_Float128)b); }
inline _Float128 pow(const int &a, const long &b) { return powf128((_Float128)a, (_Float128)b); }
inline _Float128 pow(const _Float128 &a, const long &b) { return powf128(a, (_Float128)b); }
inline _Float128 pow2(const _Float128 &a) { return a * a; }

inline _Float128 sqrt(const _Float128 &a) { return sqrtf128(a); }

inline _Float128 sin(_Float128 a) { return sinf128(a); }
inline _Float128 sinh(_Float128 a) { return sinhf128(a); }
inline _Float128 cos(_Float128 a) { return cosf128(a); }
inline _Float128 cosh(_Float128 a) { return coshf128(a); }

inline _Float128 atan2(_Float128 a, _Float128 b) { return atan2f128(a, b); }

inline _Float128 exp(const _Float128 &a) { return expf128(a); }
inline _Float128 log(const _Float128 &a) { return logf128(a); }
inline _Float128 log10(const _Float128 &a) { return log10f128(a); }
inline _Float128 log2(const _Float128 &a) { return logf128(a) / logf128(2.0); }

#ifdef __cplusplus
extern "C" {
#endif
#include <complex.h>
#include <complex>
#include <math.h>
#ifdef __cplusplus
}
#endif

inline _Float128 abs(const std::complex<_Float128> &a) { return sqrtf128(a.real() * a.real() + a.imag() * a.imag()); }

inline std::complex<_Float128> sqrt(const std::complex<_Float128> a) {
    _Float128 _Complex b, tmp;
    std::complex<_Float128> c;
    __real__(b) = (a.real());
    __imag__(b) = (a.imag());
    tmp = csqrtf128(b);
    c.real(__real__(tmp));
    c.imag(__imag__(tmp));
    return c;
}

inline std::complex<_Float128> sin(const std::complex<_Float128> a) {
    _Float128 _Complex b, tmp;
    std::complex<_Float128> c;
    __real__(b) = (a.real());
    __imag__(b) = (a.imag());
    tmp = csinf128(b);
    c.real(__real__(tmp));
    c.imag(__imag__(tmp));
    return c;
}

inline std::complex<_Float128> cos(const std::complex<_Float128> a) {
    _Float128 _Complex b, tmp;
    std::complex<_Float128> c;
    __real__(b) = (a.real());
    __imag__(b) = (a.imag());
    tmp = ccosf128(b);
    c.real(__real__(tmp));
    c.imag(__imag__(tmp));
    return c;
}

inline std::complex<_Float128> exp(const std::complex<_Float128> &a) {
    _Float128 _Complex b, tmp;
    std::complex<_Float128> c;
    __real__(b) = (a.real());
    __imag__(b) = (a.imag());
    tmp = cexpf128(b);
    c.real(__real__(tmp));
    c.imag(__imag__(tmp));
    return c;
}

inline std::complex<_Float128> log(const std::complex<_Float128> &a) {
    _Float128 _Complex b, tmp;
    std::complex<_Float128> c;
    __real__(b) = (a.real());
    __imag__(b) = (a.imag());
    tmp = clogf128(b);
    c.real(__real__(tmp));
    c.imag(__imag__(tmp));
    return c;
}

// implementation of sign transfer function.
inline _Float128 sign(_Float128 a, _Float128 b) {
    _Float128 mtmp;
    mtmp = std::abs(a);
    if (b < 0.0) {
        mtmp = -mtmp;
    }
    return mtmp;
}

inline _Float128 castREAL__Float128(mplapackint n) {
    _Float128 ret = n;
    return ret;
}

inline mplapackint castINTEGER__Float128(_Float128 a) {
    mplapackint i = a;
    return i;
}

inline long nint(_Float128 a) {
    long i;
    _Float128 tmp;
    a = a + 0.5;
    tmp = floorf128(a);
    i = (long)tmp;
    return i;
}

inline _Float128 ceil(_Float128 a) { return ceilf128(a); }
inline double cast2double(_Float128 a) { return (double)a; }

inline _Float128 pi(_Float128 dummy) { return M_PIf128; }
#endif // defined ___MPLAPACK_BUILD_WITH__FLOAT128___ && (defined ___MPLAPACK__FLOAT128_ONLY___ || defined ___MPLAPACK__FLOAT128_IS_LONGDOUBLE___)

#endif
